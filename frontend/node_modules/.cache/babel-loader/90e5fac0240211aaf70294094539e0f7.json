{"ast":null,"code":"import _defineProperty from \"/home/james/Documents/picture-layout-organiser/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/james/Documents/picture-layout-organiser/frontend/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { Progress } from 'reactstrap';\nimport Grid from './components/grid/Grid.js';\nimport ImageSquare from './components/imageSquare/ImageSquare.js';\nimport StatusMessage from './components/statusMessage/StatusMessage.js';\nimport EditPage from './components/editPage/EditPage.js';\nimport ToggleSwitch from './components/toggleSwitch/ToggleSwitch.js';\nimport arraySwap from './ArraySwap.js';\nimport partition from './Partition.js';\nimport binIcon from \"./images/bin.svg\";\nimport { getFormattedAddress, listUsers, getUserContent, saveUserContent, createAccount, deleteAccount, uploadUserMedia, uploadUserGallery } from './adapters/ManagerAdapter.js';\n\nrequire('dotenv').config();\n\nconst NUM_COLS = 3;\nconst MAX_IN_GALLERY = 10;\nconst NONE_INDEX = -1;\nconst ENTER_KEY = 13;\nconst ESC_KEY = 27;\nconst LEFT_KEY = 37;\nconst UP_KEY = 38;\nconst RIGHT_KEY = 39;\nconst DOWN_KEY = 40;\nconst ALLOWED_MIME_TYPES = ['image/jpeg', 'image/png', 'video/mp4'];\nvar lastUpdate = 0;\n\nfunction getBackendPorts() {\n  return {\n    'backend': parseInt(process.env.REACT_APP_BACKEND_PORT_BASE),\n    'imageHost': parseInt(process.env.REACT_APP_BACKEND_PORT_BASE) + 1\n  };\n}\n\nfunction copyToClipBoard(text) {\n  // Add a new <input> element to body temporarily\n  var body = document.getElementsByTagName('body')[0];\n  var tempInput = document.createElement('INPUT');\n  body.appendChild(tempInput); // Copy text into that element\n\n  tempInput.setAttribute('value', text); // Select the text\n\n  tempInput.select();\n  tempInput.setSelectionRange(0, 99999);\n  /*For mobile devices*/\n  // Run the copy command\n\n  document.execCommand('copy'); // Remove the temporary element\n\n  body.removeChild(tempInput);\n}\n\nfunction downloadUrl(url) {\n  // Remove path (url) to file\n  var fileName = url.substring(url.lastIndexOf('/') + 1); // Download url as blob to then download straight to device (not new tab)\n  // N.B: CORS must be enabled on requested files\n\n  axios({\n    'url': url,\n    'method': 'GET',\n    'responseType': 'blob'\n  }).then(response => {\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', fileName);\n    link.click();\n  });\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.accountSelectorRef = React.createRef();\n    this.fileUploaderRef = React.createRef();\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.state = {\n      backendAddress: null,\n      imageHostAddress: null,\n      users: [],\n      selectedIndex: NONE_INDEX,\n      editingIndex: NONE_INDEX,\n      content: [],\n      username: null,\n      saved: true,\n      statusMessages: [],\n      uploading: false,\n      uploadPercent: 0\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyDown, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown, false);\n  } // Universal keyDown handler - used for moving selected item\n\n\n  handleKeyDown(e) {\n    // On ESC, deselect items and close edit page\n    if (e.keyCode === ESC_KEY) {\n      this.setState({\n        'selectedIndex': NONE_INDEX,\n        'editingIndex': NONE_INDEX\n      });\n    }\n\n    const indexChangeMap = new Map([[LEFT_KEY, -1], [UP_KEY, -1 * NUM_COLS], [RIGHT_KEY, 1], [DOWN_KEY, NUM_COLS]]);\n\n    if (this.state.selectedIndex !== NONE_INDEX && indexChangeMap.has(e.keyCode)) {\n      // Prevent arrow key scrolling\n      e.preventDefault();\n      var selectedIndex = this.state.selectedIndex;\n      var swapToIndex = this.state.selectedIndex + indexChangeMap.get(e.keyCode); // N.B selectedIndex should never be locked\n\n      if (!this.isContentLocked(selectedIndex) && !this.isContentLocked(swapToIndex)) {\n        try {\n          this.setState({\n            content: arraySwap(this.state.content, selectedIndex, swapToIndex),\n            selectedIndex: swapToIndex,\n            saved: false\n          });\n        } catch (err) {\n          console.log(err);\n        }\n\n        this.delayedSaveAfterLastEdit(); // Scroll to moved selected item location\n\n        const selectedItemAnchor = document.getElementById('current-selected-item');\n        const anchorRect = selectedItemAnchor.getBoundingClientRect();\n        const absoluteAnchorTop = anchorRect.top + window.pageYOffset;\n        const middleScrollPoint = absoluteAnchorTop - window.innerHeight / 2;\n        window.scrollTo(0, middleScrollPoint);\n      }\n    }\n  }\n\n  formatContent(content) {\n    var newContent = [...content];\n    var imageHostPrefix = getFormattedAddress(this.state.imageHostAddress) + '/';\n    return newContent.map(c => {\n      var contentItem = _objectSpread({}, c);\n\n      if (contentItem.mediaType === 'image' || contentItem.mediaType === 'video') {\n        contentItem.media = imageHostPrefix + contentItem.media;\n\n        if (contentItem.mediaType === 'video') {\n          contentItem.thumbnail = imageHostPrefix + contentItem.thumbnail;\n        }\n      } else if (contentItem.mediaType === 'gallery') {\n        contentItem.media = contentItem.media.map(galleryItem => {\n          if (galleryItem.mediaType === 'image') {\n            return {\n              'media': imageHostPrefix + galleryItem.media,\n              'mediaType': 'image'\n            };\n          } else if (galleryItem.mediaType === 'video') {\n            return {\n              'media': imageHostPrefix + galleryItem.media,\n              'mediaType': 'video',\n              'thumbnail': imageHostPrefix + galleryItem.thumbnail\n            };\n          }\n\n          throw new Error(\"Unknown media type\");\n        });\n      }\n\n      return contentItem;\n    });\n  }\n\n  stripContentFormat(formattedContent) {\n    var newContent = [...formattedContent];\n    var imageHostPrefix = getFormattedAddress(this.state.imageHostAddress) + '/';\n    return newContent.map(c => {\n      var contentItem = _objectSpread({}, c);\n\n      if (contentItem.mediaType === 'image' || contentItem.mediaType === 'video') {\n        contentItem.media = contentItem.media.replace(imageHostPrefix, '');\n\n        if (contentItem.mediaType === 'video') {\n          contentItem.thumbnail = contentItem.thumbnail.replace(imageHostPrefix, '');\n        }\n      } else if (contentItem.mediaType === 'gallery') {\n        contentItem.media = contentItem.media.map(galleryItem => {\n          if (galleryItem.mediaType === 'image') {\n            return {\n              'media': galleryItem.media.replace(imageHostPrefix, ''),\n              'mediaType': 'image'\n            };\n          } else if (galleryItem.mediaType === 'video') {\n            return {\n              'media': galleryItem.media.replace(imageHostPrefix, ''),\n              'mediaType': 'video',\n              'thumbnail': galleryItem.thumbnail.replace(imageHostPrefix, '')\n            };\n          }\n\n          throw new Error(\"Unknown media type\");\n        });\n      }\n\n      return contentItem;\n    });\n  } // 2 seconds after last update (not necessarily this call), issue a save\n\n\n  delayedSaveAfterLastEdit() {\n    const delay = 2000;\n    lastUpdate = Date.now();\n    setTimeout(function () {\n      if (Date.now() - lastUpdate > delay - 100) {\n        var strippedContent = this.stripContentFormat(this.state.content);\n        saveUserContent(this.state.username, strippedContent, this.state.backendAddress, function () {\n          this.setState({\n            'saved': true\n          });\n        }.bind(this));\n      }\n    }.bind(this), delay);\n  }\n\n  deselectSelectedItem() {\n    this.setState({\n      selectedIndex: NONE_INDEX\n    });\n  }\n\n  isContentLocked(index) {\n    // N.B: content outside of the array is said to be locked also\n    if (index < 0 || index >= this.state.content.length) {\n      return true;\n    }\n\n    return this.state.content[index].locked;\n  } // Set all content items at and above the given index to locked\n\n\n  lockContentAfterIndex(lockIndex) {\n    if (lockIndex === this.getNextDownloadIndex() + 1) {\n      // Lock on furtherst locked item toggles that specific lock\n      lockIndex++;\n    }\n\n    var updatedContent = [...this.state.content];\n    updatedContent = updatedContent.map((item, itemIndex) => {\n      var newItem = _objectSpread({}, item);\n\n      newItem.locked = itemIndex >= lockIndex;\n      return newItem;\n    });\n    this.deselectSelectedItem();\n    this.setState({\n      'content': updatedContent,\n      'saved': false\n    });\n    this.delayedSaveAfterLastEdit();\n  } // Returns -1 when there is no next item\n\n\n  getNextDownloadIndex() {\n    var lockedIndexes = this.state.content.map((c, index) => ({\n      'index': index,\n      'locked': c.locked\n    })).filter(c => c.locked).map(c => c.index);\n\n    if (lockedIndexes.length === 0) {\n      // None locked: return end\n      return this.state.content.length - 1;\n    }\n\n    var minLocked = Math.min(...lockedIndexes);\n    return minLocked - 1;\n  }\n\n  saveContentItemToDevice(index, andLock) {\n    var contentToSave = this.state.content[index]; // Copy caption to clipboard\n\n    var caption = contentToSave.caption;\n    copyToClipBoard(caption); // Download file(s) of content\n\n    if (contentToSave.mediaType === 'image' || contentToSave.mediaType === 'video') {\n      downloadUrl(contentToSave.media);\n    } else if (contentToSave.mediaType === 'gallery') {\n      contentToSave.media.forEach(galleryItem => downloadUrl(galleryItem.media));\n    } else {\n      throw new Error(\"Unknown media type\");\n    }\n\n    if (andLock) {\n      // For normal 'next' usage, lock item\n      this.lockContentAfterIndex(index);\n      this.reportStatusMessage(\"Downloaded item, copied caption to clipboard and locked item\", true);\n    } else {\n      this.reportStatusMessage(\"Downloaded item and copied caption to clipboard\", true);\n    }\n  } // When a different account is selcted\n  // Also handle new account creation\n\n\n  handleAccountSelect(option) {\n    this.deselectSelectedItem();\n\n    if (option === 'create-new') {\n      if (this.state.backendAddress !== null) {\n        // Create new account\n        var newName = prompt(\"New account name\"); // Remove whitespace from beginning and end of input\n\n        if (newName !== null) {\n          newName = newName.trim();\n\n          if (newName !== null && newName !== \"\") {\n            // Create account then switch to that new account - if a duplicate name is entered, enter that account\n            createAccount(newName, this.state.backendAddress, function () {\n              // Update list of users\n              listUsers(this.state.backendAddress, users => {\n                this.setState({\n                  'users': users\n                });\n                this.accountSelectorRef.current.value = newName; // Get new user's content - usually empty unless duplicate name used\n\n                getUserContent(newName, this.state.backendAddress, function (content) {\n                  this.setState({\n                    'username': newName,\n                    'content': this.formatContent(content)\n                  });\n                }.bind(this));\n              });\n            }.bind(this));\n          }\n        }\n      }\n    } else if (option === '') {\n      // None selected\n      this.setState({\n        'username': null,\n        'content': []\n      });\n    } else {\n      // Default - switch to an existing user\n      var username = option;\n      getUserContent(username, this.state.backendAddress, function (content) {\n        this.setState({\n          'username': username,\n          'content': this.formatContent(content)\n        });\n      }.bind(this));\n    }\n  } // Save caption text to content at given index\n\n\n  saveCaption(newCaption, index) {\n    var content = [...this.state.content];\n    content[index].caption = newCaption;\n    this.setState({\n      'content': content,\n      'saved': false\n    });\n    this.delayedSaveAfterLastEdit();\n  } // Remove content from given index\n\n\n  deleteImage(index) {\n    var content = [...this.state.content]; // Delete 1 item at index, index\n\n    content.splice(index, 1);\n    this.setState({\n      'content': content,\n      'saved': false\n    });\n    this.delayedSaveAfterLastEdit();\n  } // Report a status message to the screen\n\n\n  reportStatusMessage(messageText, positive) {\n    // Use previousState so that multiple updates are not lost\n    this.setState((previousState, props) => ({\n      'statusMessages': [{\n        'text': messageText,\n        'positive': positive\n      }, ...previousState.statusMessages]\n    }));\n  }\n\n  uploadProgressUpdate(progressEvent) {\n    var progressPercent = progressEvent.loaded / progressEvent.total * 100;\n    this.setState({\n      'uploadPercent': progressPercent\n    });\n  }\n\n  uploadCompleteCallback(res) {\n    if (!res.ok) {\n      this.reportStatusMessage(\"Failed to upload, please try again\", false);\n    } else {\n      this.reportStatusMessage(res.text, true); // Display newly uploaded content\n\n      getUserContent(this.state.username, this.state.backendAddress, function (content) {\n        this.setState({\n          'username': this.state.username,\n          'content': this.formatContent(content)\n        });\n      }.bind(this));\n    } // Indicate to state that uploading is finished\n\n\n    this.setState({\n      'uploading': false\n    });\n  }\n\n  handleFilesSelected(e) {\n    var allowingFiles = partition(e.target.files, f => ALLOWED_MIME_TYPES.includes(f.type));\n    var validFiles = allowingFiles.pass;\n    var disallowedFiles = allowingFiles.fail; // Report disallowed files\n\n    disallowedFiles.forEach(f => this.reportStatusMessage(\"Could not upload \\\"\" + f.name + \"\\\" - unsupported type\", false)); // N.B: Content must be saved before upload\n\n    if (this.state.username !== null && this.state.saved) {\n      if (validFiles.length > 0) {\n        if (this.state.galleryUpload && validFiles.length > 1) {\n          if (validFiles.length > MAX_IN_GALLERY) {\n            this.reportStatusMessage(\"Cannot create gallery of more than \" + MAX_IN_GALLERY + \" items\", false);\n            return;\n          }\n\n          uploadUserGallery(validFiles, this.state.username, this.state.backendAddress, // progress callback\n          this.uploadProgressUpdate.bind(this), // callback\n          this.uploadCompleteCallback.bind(this));\n        } else {\n          this.setState({\n            'uploading': true,\n            'uploadPercent': 0\n          });\n          uploadUserMedia(validFiles, this.state.username, this.state.backendAddress, // progress callback\n          this.uploadProgressUpdate.bind(this), // callback\n          this.uploadCompleteCallback.bind(this));\n        }\n      }\n    } else {\n      // Should never be reached as inputs are disabled in this case\n      this.reportStatusMessage(\"Something went wrong, please try again\", false); // N.B: uploading has not been set to true, so we do not need to set it to false here\n    } // Remove any file from selection\n    // Causes confusing behaviour when selecting the same file twice in a row otherwise due to onChange\n\n\n    e.target.value = null;\n  } // Main render method\n\n\n  render() {\n    // Prepare image upload button and functionality\n    var imageUploadButton = React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"upload-button\",\n      onClick: () => this.fileUploaderRef.current.click(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, \"Upload\"), React.createElement(\"input\", {\n      type: \"file\",\n      multiple: true,\n      id: \"add-file\",\n      ref: this.fileUploaderRef,\n      style: {\n        display: \"none\"\n      },\n      disabled: this.state.username === null || !this.state.saved || this.state.uploading || this.state.editingIndex !== NONE_INDEX,\n      onChange: this.handleFilesSelected.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }));\n    var topBar = React.createElement(\"div\", {\n      className: \"top-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"admin-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"backend-address-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, \"Backend Address:\", React.createElement(\"input\", {\n      type: \"text\",\n      disabled: this.state.uploading || this.state.editingIndex !== NONE_INDEX,\n      onKeyDown: function (e) {\n        if (e.keyCode === ENTER_KEY) {\n          var ports = getBackendPorts();\n          var backendAddress = e.target.value + ':' + ports.backend;\n          var imageHostAddress = e.target.value + ':' + ports.imageHost;\n          this.setState({\n            'backendAddress': backendAddress,\n            'imageHostAddress': imageHostAddress\n          }); // Populate state with list of users\n\n          listUsers(backendAddress, function (users) {\n            this.setState({\n              'users': users\n            });\n          }.bind(this));\n        }\n      }.bind(this),\n      onFocus: function (e) {\n        // Deselect item on focus so that arrow key events only affect the input\n        this.deselectSelectedItem();\n      }.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      className: \"account-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, \"Account:\", React.createElement(\"select\", {\n      ref: this.accountSelectorRef,\n      disabled: this.state.backendAddress === null || this.state.uploading || this.state.editingIndex !== NONE_INDEX,\n      onChange: e => this.handleAccountSelect(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, \"None selected\"), this.state.users.map(username => React.createElement(\"option\", {\n      key: username,\n      value: username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, username)), React.createElement(\"option\", {\n      value: \"create-new\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, \"+ New account\")), React.createElement(\"img\", {\n      id: \"account-delete-icon\",\n      src: binIcon,\n      alt: \"delete account\",\n      onClick: function () {\n        if (this.state.backendAddress !== null && this.state.username !== null && !this.state.uploading && this.state.editingIndex === NONE_INDEX) {\n          if (window.confirm(\"Are you sure you want to delete \\\"\" + this.state.username + \"\\\" from the organiser\")) {\n            // Delete account, reread list of users and set current user to null user and content empty\n            deleteAccount(this.state.username, this.state.backendAddress, function () {\n              listUsers(this.state.backendAddress, users => {\n                this.setState({\n                  'users': users,\n                  'username': null,\n                  'content': []\n                });\n                this.accountSelectorRef.current.value = '';\n              });\n            }.bind(this));\n          }\n        }\n      }.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"upload-status-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, React.createElement(ToggleSwitch, {\n      initial: false,\n      text: \"Gallery upload: \",\n      onChange: checked => this.setState({\n        'galleryUpload': checked\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }), imageUploadButton, React.createElement(\"div\", {\n      className: \"progress-bar-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, React.createElement(Progress, {\n      max: \"100\",\n      color: \"success\",\n      striped: true,\n      value: this.state.uploadPercent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, Math.round(this.state.uploadPercent, 2), \"%\"))), React.createElement(\"div\", {\n      className: \"download-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      disabled: this.state.uploading || this.state.editingIndex !== NONE_INDEX || this.state.username === null || this.state.backendAddress === null,\n      onClick: function () {\n        var toDownloadIndex = this.state.selectedIndex === NONE_INDEX ? this.getNextDownloadIndex() : this.state.selectedIndex;\n\n        if (toDownloadIndex === -1) {\n          this.reportStatusMessage(\"No next item available\", false);\n          return;\n        }\n\n        this.saveContentItemToDevice(toDownloadIndex, this.state.selectedIndex === NONE_INDEX);\n      }.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, this.state.selectedIndex === NONE_INDEX ? 'Download latest and lock' : ' Download selected')), React.createElement(\"div\", {\n      className: \"status-message-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }, this.state.statusMessages.map((message, index) => React.createElement(StatusMessage, {\n      key: index,\n      text: message.text,\n      positive: message.positive,\n      handleDismiss: function () {\n        this.setState({\n          'statusMessages': this.state.statusMessages.filter((m, i) => i !== index)\n        });\n      }.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    })))); // Prepare main gridContent for display when appropriate\n    // N.B: hide content whilst uploading to prevent race conditions\n\n    var gridContent = React.createElement(\"div\", {\n      id: \"main-grid\",\n      className: \"App\",\n      style: {\n        'display': this.state.uploading ? 'none' : 'table'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, this.state.saved ? \"Content is saved and up-to-date\" : \"Saving\"), React.createElement(Grid, {\n      cols: NUM_COLS,\n      gridContent: this.state.content.map((c, index) => React.createElement(ImageSquare, {\n        media: c.media,\n        mediaType: c.mediaType,\n        captioned: c.caption !== '',\n        thumbnail: c.thumbnail,\n        selected: this.state.selectedIndex === index,\n        locked: c.locked,\n        toggleLock: function (e) {\n          // Disabled when editing - otherwise lock up to here\n          e.stopPropagation();\n\n          if (this.state.editingIndex === NONE_INDEX) {\n            this.lockContentAfterIndex(index);\n          }\n        }.bind(this),\n        handleClick: function () {\n          // Disabled when editing, else if not locked, select item\n          if (this.state.editingIndex === NONE_INDEX) {\n            if (!this.isContentLocked(index)) {\n              if (this.state.selectedIndex === index) {\n                this.deselectSelectedItem();\n              } else {\n                this.setState({\n                  selectedIndex: index\n                });\n              }\n            }\n          }\n        }.bind(this),\n        handleEditClick: function (e) {\n          // If not editing something else, choose this for editing\n          e.stopPropagation();\n\n          if (this.state.editingIndex === NONE_INDEX) {\n            this.setState({\n              'editingIndex': index,\n              'selectedIndex': NONE_INDEX\n            });\n          }\n        }.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    })); // Content to render when there is no grid to show (no account selected)\n\n    var noGridContent = React.createElement(\"div\", {\n      className: \"empty-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }, \"Please connect backend and select an account\");\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }, topBar, React.createElement(\"div\", {\n      className: \"page-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, this.state.backendAddress !== null && this.state.username !== null ? gridContent : noGridContent, this.state.editingIndex !== NONE_INDEX && React.createElement(EditPage, {\n      text: this.state.content[this.state.editingIndex].caption,\n      media: this.state.content[this.state.editingIndex].media,\n      mediaType: this.state.content[this.state.editingIndex].mediaType,\n      closePage: () => this.setState({\n        'editingIndex': NONE_INDEX\n      }),\n      saveCaption: text => this.saveCaption(text, this.state.editingIndex),\n      deleteImage: function () {\n        if (window.confirm(\"Delete image?\")) {\n          this.deleteImage(this.state.editingIndex);\n          this.setState({\n            'editingIndex': NONE_INDEX\n          });\n        }\n      }.bind(this),\n      setGalleryItemAsGalleryHead: function (itemIndex) {\n        // Get old items\n        var content = [...this.state.content];\n        var selectedGallery = content[this.state.editingIndex];\n        var galleryMedia = selectedGallery.media;\n        var toHead = galleryMedia[itemIndex]; // Delete 1 item at index, itemIndex - remove item from original place in list\n\n        galleryMedia.splice(itemIndex, 1); // Move item to head of list\n\n        galleryMedia = [toHead, ...galleryMedia]; // Build new items\n\n        selectedGallery.media = galleryMedia;\n        content[this.state.editingIndex] = selectedGallery; // Set state and save\n\n        this.setState({\n          'content': content\n        });\n        this.delayedSaveAfterLastEdit(); // Scroll to gallery head\n\n        document.getElementById(\"gallery-preview-head\").scrollIntoView();\n      }.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/james/Documents/picture-layout-organiser/frontend/src/App.js"],"names":["React","Component","axios","Progress","Grid","ImageSquare","StatusMessage","EditPage","ToggleSwitch","arraySwap","partition","getFormattedAddress","listUsers","getUserContent","saveUserContent","createAccount","deleteAccount","uploadUserMedia","uploadUserGallery","require","config","NUM_COLS","MAX_IN_GALLERY","NONE_INDEX","ENTER_KEY","ESC_KEY","LEFT_KEY","UP_KEY","RIGHT_KEY","DOWN_KEY","ALLOWED_MIME_TYPES","lastUpdate","getBackendPorts","parseInt","process","env","REACT_APP_BACKEND_PORT_BASE","copyToClipBoard","text","body","document","getElementsByTagName","tempInput","createElement","appendChild","setAttribute","select","setSelectionRange","execCommand","removeChild","downloadUrl","url","fileName","substring","lastIndexOf","then","response","window","URL","createObjectURL","Blob","data","link","href","click","App","constructor","props","accountSelectorRef","createRef","fileUploaderRef","handleKeyDown","bind","state","backendAddress","imageHostAddress","users","selectedIndex","editingIndex","content","username","saved","statusMessages","uploading","uploadPercent","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","e","keyCode","setState","indexChangeMap","Map","has","preventDefault","swapToIndex","get","isContentLocked","err","console","log","delayedSaveAfterLastEdit","selectedItemAnchor","getElementById","anchorRect","getBoundingClientRect","absoluteAnchorTop","top","pageYOffset","middleScrollPoint","innerHeight","scrollTo","formatContent","newContent","imageHostPrefix","map","c","contentItem","mediaType","media","thumbnail","galleryItem","Error","stripContentFormat","formattedContent","replace","delay","Date","now","setTimeout","strippedContent","deselectSelectedItem","index","length","locked","lockContentAfterIndex","lockIndex","getNextDownloadIndex","updatedContent","item","itemIndex","newItem","lockedIndexes","filter","minLocked","Math","min","saveContentItemToDevice","andLock","contentToSave","caption","forEach","reportStatusMessage","handleAccountSelect","option","newName","prompt","trim","current","value","saveCaption","newCaption","deleteImage","splice","messageText","positive","previousState","uploadProgressUpdate","progressEvent","progressPercent","loaded","total","uploadCompleteCallback","res","ok","handleFilesSelected","allowingFiles","target","files","f","includes","type","validFiles","pass","disallowedFiles","fail","name","galleryUpload","render","imageUploadButton","display","topBar","ports","backend","imageHost","binIcon","confirm","checked","round","toDownloadIndex","message","m","i","gridContent","stopPropagation","noGridContent","selectedGallery","galleryMedia","toHead","scrollIntoView"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport './App.css';\n\nimport {Progress} from 'reactstrap';\n\nimport Grid from './components/grid/Grid.js';\nimport ImageSquare from './components/imageSquare/ImageSquare.js';\nimport StatusMessage from './components/statusMessage/StatusMessage.js';\nimport EditPage from './components/editPage/EditPage.js';\nimport ToggleSwitch from './components/toggleSwitch/ToggleSwitch.js';\n\nimport arraySwap from './ArraySwap.js';\nimport partition from './Partition.js';\n\nimport binIcon from './images/bin.svg';\n\nimport {\n  getFormattedAddress,\n  listUsers,\n  getUserContent,\n  saveUserContent,\n  createAccount,\n  deleteAccount,\n  uploadUserMedia,\n  uploadUserGallery\n  } from './adapters/ManagerAdapter.js';\n\nrequire('dotenv').config();\n\nconst NUM_COLS = 3;\nconst MAX_IN_GALLERY = 10;\n\nconst NONE_INDEX = -1;\n\nconst ENTER_KEY = 13;\nconst ESC_KEY = 27;\nconst LEFT_KEY = 37;\nconst UP_KEY = 38;\nconst RIGHT_KEY = 39;\nconst DOWN_KEY = 40;\n\nconst ALLOWED_MIME_TYPES = ['image/jpeg', 'image/png', 'video/mp4'];\n\nvar lastUpdate = 0;\n\nfunction getBackendPorts() {\n  return ({\n    'backend': parseInt(process.env.REACT_APP_BACKEND_PORT_BASE),\n    'imageHost': parseInt(process.env.REACT_APP_BACKEND_PORT_BASE) + 1\n  });\n}\n\nfunction copyToClipBoard(text) {\n  // Add a new <input> element to body temporarily\n  var body = document.getElementsByTagName('body')[0];\n  var tempInput = document.createElement('INPUT');\n  body.appendChild(tempInput);\n  // Copy text into that element\n  tempInput.setAttribute('value', text);\n  // Select the text\n  tempInput.select();\n  tempInput.setSelectionRange(0, 99999); /*For mobile devices*/\n  // Run the copy command\n  document.execCommand('copy');\n  // Remove the temporary element\n  body.removeChild(tempInput);\n}\n\nfunction downloadUrl(url) {\n  // Remove path (url) to file\n  var fileName = url.substring(url.lastIndexOf('/') + 1);\n\n  // Download url as blob to then download straight to device (not new tab)\n  // N.B: CORS must be enabled on requested files\n  axios({\n    'url': url,\n    'method': 'GET',\n    'responseType': 'blob',\n  }).then((response) => {\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', fileName);\n    link.click();\n  });\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.accountSelectorRef = React.createRef();\n    this.fileUploaderRef = React.createRef();\n\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n\n    this.state = {\n      backendAddress: null,\n      imageHostAddress: null,\n      users: [],\n      selectedIndex: NONE_INDEX,\n      editingIndex: NONE_INDEX,\n      content: [],\n      username: null,\n      saved: true,\n      statusMessages: [],\n      uploading: false,\n      uploadPercent: 0\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyDown, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown, false);\n  }\n\n  // Universal keyDown handler - used for moving selected item\n  handleKeyDown(e) {\n    // On ESC, deselect items and close edit page\n    if (e.keyCode === ESC_KEY) {\n      this.setState({'selectedIndex': NONE_INDEX, 'editingIndex': NONE_INDEX});\n    }\n    const indexChangeMap = new Map([[LEFT_KEY, -1], [UP_KEY, -1 * NUM_COLS], [RIGHT_KEY, 1], [DOWN_KEY, NUM_COLS]]);\n    if (this.state.selectedIndex !== NONE_INDEX && indexChangeMap.has(e.keyCode)) {\n      // Prevent arrow key scrolling\n      e.preventDefault();\n\n      var selectedIndex = this.state.selectedIndex;\n      var swapToIndex = this.state.selectedIndex + indexChangeMap.get(e.keyCode);\n      // N.B selectedIndex should never be locked\n      if (!this.isContentLocked(selectedIndex) && !this.isContentLocked(swapToIndex)) {\n        try{\n          this.setState({\n            content: arraySwap(this.state.content, selectedIndex, swapToIndex),\n            selectedIndex: swapToIndex,\n            saved: false\n          });\n        } catch(err) {\n          console.log(err);\n        }\n        this.delayedSaveAfterLastEdit();\n\n        // Scroll to moved selected item location\n        const selectedItemAnchor = document.getElementById('current-selected-item');\n        const anchorRect = selectedItemAnchor.getBoundingClientRect();\n        const absoluteAnchorTop = anchorRect.top + window.pageYOffset;\n        const middleScrollPoint = absoluteAnchorTop - (window.innerHeight / 2);\n        window.scrollTo(0, middleScrollPoint);\n      }\n    }\n  }\n\n  formatContent(content) {\n    var newContent = [...content];\n    var imageHostPrefix = getFormattedAddress(this.state.imageHostAddress) + '/';\n\n    return newContent.map(c => {\n      var contentItem = {...c}\n      if (contentItem.mediaType === 'image' || contentItem.mediaType === 'video') {\n        contentItem.media = imageHostPrefix + contentItem.media;\n        if (contentItem.mediaType === 'video') {\n          contentItem.thumbnail = imageHostPrefix + contentItem.thumbnail;\n        }\n      } else if (contentItem.mediaType === 'gallery') {\n        contentItem.media = contentItem.media.map(galleryItem => {\n          if (galleryItem.mediaType === 'image') {\n            return {\n              'media': imageHostPrefix + galleryItem.media,\n              'mediaType': 'image'\n            };\n          } else if (galleryItem.mediaType === 'video') {\n            return {\n              'media': imageHostPrefix + galleryItem.media,\n              'mediaType': 'video',\n              'thumbnail': imageHostPrefix + galleryItem.thumbnail,\n            };\n          }\n          throw new Error(\"Unknown media type\");\n        });\n      }\n      return contentItem;\n    });\n  }\n\n  stripContentFormat(formattedContent) {\n    var newContent = [...formattedContent];\n    var imageHostPrefix = getFormattedAddress(this.state.imageHostAddress) + '/';\n\n    return newContent.map(c => {\n      var contentItem = {...c}\n      if (contentItem.mediaType === 'image' || contentItem.mediaType === 'video') {\n        contentItem.media = contentItem.media.replace(imageHostPrefix, '');\n        if (contentItem.mediaType === 'video') {\n          contentItem.thumbnail = contentItem.thumbnail.replace(imageHostPrefix, '');\n        }\n      } else if (contentItem.mediaType === 'gallery') {\n        contentItem.media = contentItem.media.map(galleryItem => {\n          if (galleryItem.mediaType === 'image') {\n            return {\n              'media': galleryItem.media.replace(imageHostPrefix, ''),\n              'mediaType': 'image'\n            };\n          } else if (galleryItem.mediaType === 'video') {\n            return {\n              'media': galleryItem.media.replace(imageHostPrefix, ''),\n              'mediaType': 'video',\n              'thumbnail': galleryItem.thumbnail.replace(imageHostPrefix, ''),\n            };\n          }\n          throw new Error(\"Unknown media type\");\n        });\n      }\n      return contentItem;\n    });\n  }\n\n  // 2 seconds after last update (not necessarily this call), issue a save\n  delayedSaveAfterLastEdit() {\n    const delay = 2000;\n    lastUpdate = Date.now();\n    setTimeout(function(){\n      if (Date.now() - lastUpdate > delay - 100) {\n        var strippedContent = this.stripContentFormat(this.state.content)\n        saveUserContent(this.state.username, strippedContent, this.state.backendAddress, function(){\n          this.setState({'saved':true});\n        }.bind(this));\n      }\n    }.bind(this), delay);\n  }\n\n  deselectSelectedItem() {\n    this.setState({selectedIndex: NONE_INDEX})\n  }\n\n  isContentLocked(index) {\n    // N.B: content outside of the array is said to be locked also\n    if (index < 0 || index >= this.state.content.length) {\n      return true;\n    }\n    return this.state.content[index].locked;\n  }\n\n  // Set all content items at and above the given index to locked\n  lockContentAfterIndex(lockIndex) {\n    if (lockIndex === this.getNextDownloadIndex() + 1) {\n      // Lock on furtherst locked item toggles that specific lock\n      lockIndex++;\n    }\n    var updatedContent = [...this.state.content];\n    updatedContent = updatedContent.map((item, itemIndex) => {\n      var newItem = {...item};\n      newItem.locked = (itemIndex >= lockIndex);\n      return newItem;\n    });\n    this.deselectSelectedItem();\n    this.setState({'content': updatedContent, 'saved': false});\n    this.delayedSaveAfterLastEdit();\n  }\n\n  // Returns -1 when there is no next item\n  getNextDownloadIndex() {\n    var lockedIndexes = this.state.content\n      .map((c, index) => ({'index': index, 'locked':c.locked}))\n      .filter(c => c.locked)\n      .map(c => c.index);\n    if (lockedIndexes.length === 0) {\n      // None locked: return end\n      return this.state.content.length - 1;\n    }\n    var minLocked = Math.min(...lockedIndexes);\n    return minLocked - 1;\n  }\n\n  saveContentItemToDevice(index, andLock) {\n    var contentToSave = this.state.content[index];\n    // Copy caption to clipboard\n    var caption = contentToSave.caption;\n    copyToClipBoard(caption);\n\n    // Download file(s) of content\n    if (contentToSave.mediaType === 'image' || contentToSave.mediaType === 'video') {\n      downloadUrl(contentToSave.media);\n    } else if (contentToSave.mediaType === 'gallery') {\n      contentToSave.media.forEach(galleryItem => downloadUrl(galleryItem.media));\n    } else {\n      throw new Error(\"Unknown media type\");\n    }\n\n    if (andLock) {\n      // For normal 'next' usage, lock item\n      this.lockContentAfterIndex(index);\n      this.reportStatusMessage(\"Downloaded item, copied caption to clipboard and locked item\", true);\n    } else {\n      this.reportStatusMessage(\"Downloaded item and copied caption to clipboard\", true);\n    }\n  }\n\n  // When a different account is selcted\n  // Also handle new account creation\n  handleAccountSelect(option) {\n    this.deselectSelectedItem();\n    if (option === 'create-new') {\n      if (this.state.backendAddress !== null) {\n        // Create new account\n        var newName = prompt(\"New account name\");\n        // Remove whitespace from beginning and end of input\n        if (newName !== null) {\n          newName = newName.trim();\n          if (newName !== null && newName !== \"\") {\n            // Create account then switch to that new account - if a duplicate name is entered, enter that account\n            createAccount(newName, this.state.backendAddress, function() {\n              // Update list of users\n              listUsers(this.state.backendAddress, (users) => {\n                this.setState({'users': users});\n                this.accountSelectorRef.current.value = newName;\n                // Get new user's content - usually empty unless duplicate name used\n                getUserContent(newName, this.state.backendAddress, function(content){\n                  this.setState(\n                    {\n                      'username': newName,\n                      'content': this.formatContent(content)\n                    }\n                  );\n                }.bind(this));\n              })\n            }.bind(this));\n          }\n        }\n      }\n    } else if (option === '') {\n      // None selected\n      this.setState({\n        'username': null,\n        'content': []\n      });\n    } else {\n      // Default - switch to an existing user\n      var username = option;\n      getUserContent(username, this.state.backendAddress, function(content){\n        this.setState(\n          {\n            'username': username,\n            'content': this.formatContent(content)\n          }\n        );\n      }.bind(this));\n    }\n  }\n\n  // Save caption text to content at given index\n  saveCaption(newCaption, index) {\n    var content = [...this.state.content];\n    content[index].caption = newCaption;\n    this.setState({\n      'content': content,\n      'saved': false,\n    });\n    this.delayedSaveAfterLastEdit();\n  }\n\n  // Remove content from given index\n  deleteImage(index) {\n    var content = [...this.state.content];\n    // Delete 1 item at index, index\n    content.splice(index, 1);\n    this.setState({'content': content, 'saved': false});\n    this.delayedSaveAfterLastEdit();\n  }\n\n  // Report a status message to the screen\n  reportStatusMessage(messageText, positive) {\n    // Use previousState so that multiple updates are not lost\n    this.setState((previousState, props) =>\n      ({'statusMessages':\n        [\n          {'text': messageText, 'positive': positive},\n          ...previousState.statusMessages\n        ]\n      })\n    );\n  }\n\n  uploadProgressUpdate(progressEvent) {\n    var progressPercent = progressEvent.loaded / progressEvent.total * 100;\n    this.setState({'uploadPercent': progressPercent});\n  }\n\n  uploadCompleteCallback(res) {\n    if (!res.ok) {\n      this.reportStatusMessage(\"Failed to upload, please try again\", false)\n    } else {\n      this.reportStatusMessage(res.text, true);\n      // Display newly uploaded content\n      getUserContent(this.state.username, this.state.backendAddress, function(content) {\n        this.setState(\n          {\n            'username': this.state.username,\n            'content': this.formatContent(content)\n          }\n        );\n      }.bind(this));\n    }\n    // Indicate to state that uploading is finished\n    this.setState({'uploading': false});\n  }\n\n  handleFilesSelected(e) {\n    var allowingFiles = partition(e.target.files, f => ALLOWED_MIME_TYPES.includes(f.type));\n    var validFiles = allowingFiles.pass;\n    var disallowedFiles = allowingFiles.fail;\n\n    // Report disallowed files\n    disallowedFiles.forEach(f => this.reportStatusMessage(\"Could not upload \\\"\" + f.name + \"\\\" - unsupported type\", false));\n\n    // N.B: Content must be saved before upload\n    if (this.state.username !== null && this.state.saved) {\n      if (validFiles.length > 0) {\n        if (this.state.galleryUpload && validFiles.length > 1) {\n          if (validFiles.length > MAX_IN_GALLERY) {\n            this.reportStatusMessage(\"Cannot create gallery of more than \" + MAX_IN_GALLERY + \" items\", false);\n            return;\n          }\n          uploadUserGallery(\n            validFiles,\n            this.state.username,\n            this.state.backendAddress,\n            // progress callback\n            this.uploadProgressUpdate.bind(this),\n            // callback\n            this.uploadCompleteCallback.bind(this)\n          );\n        } else {\n          this.setState({'uploading': true, 'uploadPercent': 0});\n          uploadUserMedia(\n            validFiles,\n            this.state.username,\n            this.state.backendAddress,\n            // progress callback\n            this.uploadProgressUpdate.bind(this),\n            // callback\n            this.uploadCompleteCallback.bind(this)\n          );\n        }\n      }\n    } else {\n      // Should never be reached as inputs are disabled in this case\n      this.reportStatusMessage(\"Something went wrong, please try again\", false);\n      // N.B: uploading has not been set to true, so we do not need to set it to false here\n    }\n\n    // Remove any file from selection\n    // Causes confusing behaviour when selecting the same file twice in a row otherwise due to onChange\n    e.target.value = null;\n  }\n\n  // Main render method\n  render() {\n    // Prepare image upload button and functionality\n    var imageUploadButton = (\n      <span>\n        <button\n          id='upload-button'\n          onClick={() => this.fileUploaderRef.current.click()}\n        >\n          Upload\n        </button>\n        <input\n          type=\"file\" multiple\n          id=\"add-file\"\n          ref={this.fileUploaderRef}\n          style={{display: \"none\"}}\n          disabled={this.state.username === null || !this.state.saved || this.state.uploading || this.state.editingIndex !== NONE_INDEX}\n          onChange={this.handleFilesSelected.bind(this)}\n        />\n      </span>\n    );\n\n    var topBar = (\n      <div className=\"top-bar\">\n        <div className=\"admin-bar\">\n          <span className=\"backend-address-input\">\n            Backend Address:\n            <input\n              type=\"text\"\n              disabled={this.state.uploading || this.state.editingIndex !== NONE_INDEX}\n              onKeyDown={\n                function(e){\n                  if (e.keyCode === ENTER_KEY) {\n                    var ports = getBackendPorts();\n                    var backendAddress = e.target.value + ':' + ports.backend;\n                    var imageHostAddress = e.target.value + ':' + ports.imageHost;\n                    this.setState(\n                      {\n                        'backendAddress': backendAddress,\n                        'imageHostAddress': imageHostAddress\n                      }\n                    );\n                    // Populate state with list of users\n                    listUsers(backendAddress, function(users){\n                      this.setState({'users':users})\n                    }.bind(this));\n                  }\n                }.bind(this)}\n              onFocus={function(e){\n                // Deselect item on focus so that arrow key events only affect the input\n                this.deselectSelectedItem();\n              }.bind(this)}\n            />\n          </span>\n          <span className='account-select'>\n            Account:\n            <select\n              ref={this.accountSelectorRef}\n              disabled={this.state.backendAddress === null || this.state.uploading || this.state.editingIndex !== NONE_INDEX}\n              onChange={(e) => this.handleAccountSelect(e.target.value)}\n            >\n              <option value=''>None selected</option>\n              {this.state.users.map(username =>\n                (<option key={username} value={username}>{username}</option>)\n              )}\n              <option value='create-new'>+ New account</option>\n            </select>\n            <img\n              id='account-delete-icon'\n              src={binIcon}\n              alt='delete account'\n              onClick={function() {\n                if (this.state.backendAddress !== null && this.state.username !== null && !this.state.uploading && this.state.editingIndex === NONE_INDEX) {\n                  if (window.confirm(\"Are you sure you want to delete \\\"\" + this.state.username + \"\\\" from the organiser\")) {\n                    // Delete account, reread list of users and set current user to null user and content empty\n                    deleteAccount(this.state.username, this.state.backendAddress, function() {\n                      listUsers(this.state.backendAddress, (users) => {\n                        this.setState({'users': users, 'username': null, 'content': []});\n                        this.accountSelectorRef.current.value = '';\n                      });\n                    }.bind(this));\n                  }\n                }\n              }.bind(this)}\n            />\n          </span>\n        </div>\n        <div className='upload-status-bar'>\n          <ToggleSwitch\n            initial={false}\n            text={\"Gallery upload: \"}\n            onChange={checked => this.setState({'galleryUpload': checked})}\n          />\n          {imageUploadButton}\n          <div className=\"progress-bar-container\">\n            <Progress max=\"100\" color=\"success\" striped value={this.state.uploadPercent}>{Math.round(this.state.uploadPercent, 2)}%</Progress>\n          </div>\n        </div>\n        <div className='download-button'>\n          <button\n          disabled={this.state.uploading || this.state.editingIndex !== NONE_INDEX || this.state.username === null || this.state.backendAddress === null }\n          onClick={function() {\n            var toDownloadIndex = this.state.selectedIndex === NONE_INDEX ? this.getNextDownloadIndex() : this.state.selectedIndex;\n            if (toDownloadIndex === -1) {\n              this.reportStatusMessage(\"No next item available\", false);\n              return;\n            }\n            this.saveContentItemToDevice(toDownloadIndex, this.state.selectedIndex === NONE_INDEX);\n          }.bind(this)}\n          >\n            {this.state.selectedIndex === NONE_INDEX ? 'Download latest and lock' : ' Download selected'}\n          </button>\n        </div>\n        <div className='status-message-container'>\n          {this.state.statusMessages.map((message, index) =>\n            <StatusMessage\n              key={index}\n              text={message.text}\n              positive={message.positive}\n              handleDismiss={function(){\n                this.setState({'statusMessages': this.state.statusMessages.filter((m, i) => i !== index)});\n              }.bind(this)}\n            />\n          )}\n        </div>\n      </div>\n    );\n\n    // Prepare main gridContent for display when appropriate\n    // N.B: hide content whilst uploading to prevent race conditions\n    var gridContent = (\n      <div id='main-grid' className='App' style={{'display': this.state.uploading ? 'none' : 'table'}}>\n      <h2>{this.state.saved ? \"Content is saved and up-to-date\" : \"Saving\"}</h2>\n      <Grid\n        cols={NUM_COLS}\n        gridContent={this.state.content.map((c, index) => (\n          <ImageSquare\n            media={c.media}\n            mediaType={c.mediaType}\n            captioned={c.caption !== ''}\n            thumbnail={c.thumbnail}\n            selected={this.state.selectedIndex === index}\n            locked={c.locked}\n            toggleLock={function(e) {\n              // Disabled when editing - otherwise lock up to here\n              e.stopPropagation();\n              if (this.state.editingIndex === NONE_INDEX) {\n                this.lockContentAfterIndex(index);\n              }\n            }.bind(this)}\n            handleClick={function() {\n              // Disabled when editing, else if not locked, select item\n              if (this.state.editingIndex === NONE_INDEX) {\n                if (!this.isContentLocked(index)) {\n                  if (this.state.selectedIndex === index) {\n                    this.deselectSelectedItem();\n                  } else {\n                    this.setState({selectedIndex: index});\n                  }\n                }\n              }\n            }.bind(this)}\n            handleEditClick={function(e) {\n              // If not editing something else, choose this for editing\n              e.stopPropagation();\n              if (this.state.editingIndex === NONE_INDEX) {\n                this.setState({'editingIndex': index, 'selectedIndex': NONE_INDEX})\n              }\n            }.bind(this)}\n          />\n        ))}\n      />\n      </div>\n    );\n\n    // Content to render when there is no grid to show (no account selected)\n    var noGridContent = (\n      <div className='empty-content'>\n        Please connect backend and select an account\n      </div>\n    );\n\n    return (\n      <div>\n        {topBar}\n        <div className='page-content'>\n\n          {\n            (this.state.backendAddress !== null && this.state.username !== null)\n              ? gridContent\n              : noGridContent\n          }\n\n          {\n            this.state.editingIndex !== NONE_INDEX &&\n            <EditPage\n              text={this.state.content[this.state.editingIndex].caption}\n              media={this.state.content[this.state.editingIndex].media}\n              mediaType={this.state.content[this.state.editingIndex].mediaType}\n              closePage={() => this.setState({'editingIndex': NONE_INDEX})}\n              saveCaption={(text) => this.saveCaption(text, this.state.editingIndex)}\n              deleteImage={function() {\n                if (window.confirm(\"Delete image?\")) {\n                  this.deleteImage(this.state.editingIndex);\n                  this.setState({'editingIndex': NONE_INDEX});\n                }\n              }.bind(this)}\n              setGalleryItemAsGalleryHead={function(itemIndex) {\n                // Get old items\n                var content = [...this.state.content];\n                var selectedGallery = content[this.state.editingIndex];\n                var galleryMedia = selectedGallery.media;\n                var toHead = galleryMedia[itemIndex];\n\n                // Delete 1 item at index, itemIndex - remove item from original place in list\n                galleryMedia.splice(itemIndex, 1);\n                // Move item to head of list\n                galleryMedia = [toHead, ...galleryMedia];\n\n                // Build new items\n                selectedGallery.media = galleryMedia\n                content[this.state.editingIndex] = selectedGallery;\n\n                // Set state and save\n                this.setState({'content': content});\n                this.delayedSaveAfterLastEdit();\n\n                // Scroll to gallery head\n                document.getElementById(\"gallery-preview-head\").scrollIntoView();\n              }.bind(this)}\n            />\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}